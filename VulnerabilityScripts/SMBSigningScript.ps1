$RegChanges = @(($regChange1),($regchange2),($regChange3),($RegChange4))

$RegChange1 = @(
    "HKLM:\System\CurrentControlSet\Services\LanManServer\Parameters",
    "RequireSecuritySignature",
    1,
    "REG_DWORD",
    "RequireSecuritySignature-LanManServer"
)

$RegChange2 = @(
    "HKLM:\System\CurrentControlSet\Services\LanManWorkstation\Parameters",
    "RequireSecuritySignature",
    1,
    "REG_DWORD",
    "RequireSecuritySignature-LanManWorkstation"
)

$RegChange3 = @(
    "HKLM:\System\CurrentControlSet\Services\LanManWorkstation\Parameters",
    "EnableSecuritySignature",
    1,
    "REG_DWORD",
    "EnableSecuritySignature-LanManWorkstation"
)

$RegChange4 = @(
    "HKLM:\System\CurrentControlSet\Services\LanManServer\Parameters",
    "EnableSecuritySignature",
    1,
    "REG_DWORD",
    "EnableSecuritySignature-LanManServer"
)

$BackupPath = "C:\Support\"
function BackupReg {
    $BackupExist = Test-Path -Path ($BackupPath + $BackupFile) -PathType Leaf
    if (!$BackupExist) {
    reg save ($RegPath).Replace(":","") ($BackupPath + $BackupFile)
    }
    $BackupExist = Test-Path -Path ($BackupPath + $BackupFile) -PathType Leaf
    if ($BackupExist) {
        Write-Host "Successfully created or found backup of $RegPath"
    } ELSE { Write-Host "Failed to create a backup of the registry key: $RegPath" }
}

function CommitChange {

    $TestBackup = Test-Path -Path ($BackupPath + $BackupFile) -pathtype Leaf
    if (!$TestBackup) {
        return "
        Cannot find backup for the registry change $ChangeName
        
        Skipping the change..."
    }

    reg add ($RegPath.Replace(":","")) /v $RegEntry /t $DataType /d $Value /f
    $NewValue = Get-ItemPropertyValue -Path $RegPath -Name $RegEntry

    if ($NewValue -eq $Value) {
        Return "Successfully changed the value of $RegEntry in $RegPath"
    }
    ELSE {
        Return "$ChangeName is not the expected value after changing! The value is $NewValue"
    }
} 
function Commit {
    Foreach ($change in $RegChanges) {
        $script:RegPath = $Change[0]
        $script:RegEntry = $Change[1]
        $script:Value = $Change[2]
        $script:DataType = $Change[3]
        $script:ChangeName = $Change[4]
        $BackupFile = "backup$($RegPath.TrimStart("HKLM:").Replace("\","-")).reg"
        if ((Get-ItemPropertyValue -Path $RegPath -Name $RegEntry) -eq $Value) {
            Write-Host "The change $ChangeName is already the desired value! Skipping..."
        } ELSE { 
            BackupReg
            CommitChange
        }

    }
}

function Revert {
    Foreach ($change in $RegChanges) {
        $script:RegPath = $Change[0]
        $script:RegEntry = $Change[1]
        $script:Value = $Change[2]
        $script:DataType = $Change[3]
        $script:ChangeName = $Change[4]
        $BackupFile = "backup$($RegPath.TrimStart("HKLM:").Replace("\","-")).reg"
        $RestoreOperation = Reg Restore ($RegPath).Replace(":","") ($BackupPath + $BackupFile)
        if ($RestoreOperation -like "The operation completed successfully.") {
            Write-Host "Successful restored the registry for path: $RegPath"
        } ELSE {
            Write-Host "Failed to restore the registry for the path: $RegPath"
        }
    }
}

Write-Host "*******************************"
Write-Host "***** SMB Signing Script ******"
Write-Host "*******************************"
Write-Host "***** Available Commands: *****"
Write-Host "*********** Commit ************"
Write-Host "*********** Revert ************"
Write-Host "*******************************"

